"use client"

import { useState, useMemo, useEffect, useCallback } from "react"
import Link from "next/link"
import { Input } from "@/components/ui/input"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Summarizer } from "@/components/Summarizer"
import type { Statute } from "@/data"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Search, ExternalLink, BookOpen, Loader2, Sparkles } from "lucide-react"
import { findStatute } from "@/ai/flows/find-statute"

function StatuteDetailModal({ statute, children, isAiResult = false }: { statute: Statute, children: React.ReactNode, isAiResult?: boolean }) {
    return (
        <Dialog>
            <DialogTrigger asChild>{children}</DialogTrigger>
            <DialogContent className="sm:max-w-[625px]">
                <DialogHeader>
                    <div className="flex justify-between items-start">
                        <DialogTitle>{statute.title}</DialogTitle>
                        {isAiResult && <Badge variant="secondary" className="bg-accent/20 text-accent-foreground border-accent/50">AI Result</Badge>}
                    </div>
                    <DialogDescription>{statute.code} - {statute.description}</DialogDescription>
                </DialogHeader>
                <ScrollArea className="h-96 pr-6">
                    <div className="space-y-4 py-4 text-sm">
                        <div className="p-4 bg-muted/50 rounded-lg">
                            <h4 className="font-semibold mb-2">Degree of Charge</h4>
                            <p className="text-muted-foreground">{statute.degreeOfCharge}</p>
                        </div>
                        <div className="p-4 bg-muted/50 rounded-lg">
                            <h4 className="font-semibold mb-2">What it Means for Officers</h4>
                            <p className="text-muted-foreground leading-relaxed">{statute.practicalSummary}</p>
                        </div>
                         <div className="p-4 bg-muted/50 rounded-lg">
                            <h4 className="font-semibold mb-2">Real-World Example</h4>
                            <p className="text-muted-foreground leading-relaxed">{statute.example}</p>
                        </div>
                         {isAiResult && (
                            <div className="p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
                                <h4 className="font-semibold mb-2 text-destructive-foreground/90">AI Result Disclaimer</h4>
                                <p className="text-destructive-foreground/80 leading-relaxed">This information was generated by AI and has not been verified. Always consult official sources for legal decisions.</p>
                            </div>
                         )}
                    </div>
                </ScrollArea>
                <DialogFooter>
                    <Summarizer documentText={statute.fullText || `${statute.practicalSummary} ${statute.example}`} documentTitle={statute.title} />
                     <Button asChild variant="secondary">
                        <Link href={statute.url} target="_blank">
                            <ExternalLink className="mr-2 h-4 w-4" />
                            View Full Statute
                        </Link>
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    )
}


export function StatuteClient({
  initialStatutes,
}: {
  initialStatutes: Statute[]
}) {
  const [searchTerm, setSearchTerm] = useState("")
  const [isAiSearching, setIsAiSearching] = useState(false)
  const [aiResult, setAiResult] = useState<Statute | null>(null)

  const filteredStatutes = useMemo(() => {
    if (!searchTerm) {
      return initialStatutes
    }
    const lowercasedTerm = searchTerm.toLowerCase();
    return initialStatutes.filter(
      (s) =>
        s.title.toLowerCase().includes(lowercasedTerm) ||
        s.code.toLowerCase().includes(lowercasedTerm) ||
        s.description.toLowerCase().includes(lowercasedTerm) ||
        s.practicalSummary.toLowerCase().includes(lowercasedTerm) ||
        s.example.toLowerCase().includes(lowercasedTerm)
    )
  }, [searchTerm, initialStatutes])

  useEffect(() => {
    // A debounced effect to trigger AI search
    const handler = setTimeout(() => {
      if (searchTerm && filteredStatutes.length === 0 && !isAiSearching) {
        setIsAiSearching(true);
        setAiResult(null);
        findStatute({ query: searchTerm })
          .then(result => {
            if (result && result.code) {
              const newStatute: Statute = {
                id: result.code.toLowerCase().replace(/[^a-z0-9]/g, '-'),
                code: result.code,
                title: result.title || 'N/A',
                description: result.description || 'No description provided by AI.',
                fullText: result.practicalSummary || 'No full text available for AI-generated result.',
                degreeOfCharge: result.degreeOfCharge || 'N/A',
                practicalSummary: result.practicalSummary || 'No summary provided by AI.',
                example: result.example || 'No example provided by AI.',
                url: `https://www.flsenate.gov/Laws/Statutes/search?search=${encodeURIComponent(result.title || result.code)}&context=statutes`,
              };
              setAiResult(newStatute);
            } else {
              setAiResult(null); // Explicitly nullify if AI finds nothing
            }
          })
          .catch(error => {
            console.error("AI search failed:", error);
            setAiResult(null);
          })
          .finally(() => {
            setIsAiSearching(false);
          });
      }
    }, 800); // Debounce for 800ms

    return () => {
      clearTimeout(handler); // Cleanup on component unmount or search term change
    };
  }, [searchTerm, filteredStatutes.length]);


  const showLocalResults = filteredStatutes.length > 0;
  const showAiResult = !showLocalResults && aiResult;
  const showLoading = !showLocalResults && isAiSearching;
  const showNotFound = !showLocalResults && !aiResult && !isAiSearching && searchTerm.length > 0;

  return (
    <div className="flex flex-col h-[calc(100vh-12rem)] animate-fade-in-up">
      <div className="relative mb-4">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
        <Input
          placeholder="Search by title, code, or keyword (e.g. 'DUI')"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-10"
        />
      </div>
      <ScrollArea className="flex-1 pr-4 -mr-4">
        <div className="space-y-4">
          {showLocalResults && filteredStatutes.map((s, index) => (
              <StatuteDetailModal key={s.id} statute={s}>
                <Card
                  className="animate-fade-in-up hover:border-primary transition-colors cursor-pointer"
                  style={{ animationDelay: `${index * 50}ms` }}
                >
                  <CardHeader>
                    <div className="flex justify-between items-start gap-4">
                      <div className="flex-1">
                        <CardTitle>{s.title}</CardTitle>
                        <CardDescription>{s.code}</CardDescription>
                      </div>
                       <Badge variant="secondary">{s.degreeOfCharge}</Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-muted-foreground line-clamp-2">
                      {s.practicalSummary}
                    </p>
                  </CardContent>
                </Card>
              </StatuteDetailModal>
            ))}

            {showLoading && (
                 <div className="text-center py-16">
                    <Loader2 className="mx-auto h-12 w-12 animate-spin text-primary" />
                    <h3 className="mt-4 text-lg font-medium">AI is searching statutes...</h3>
                    <p className="mt-1 text-sm text-muted-foreground">This may take a moment.</p>
                </div>
            )}
            
            {showAiResult && (
                <StatuteDetailModal statute={aiResult!} isAiResult={true}>
                    <Card
                    className="animate-fade-in-up hover:border-accent transition-colors cursor-pointer border-accent/50"
                    >
                    <CardHeader>
                        <div className="flex justify-between items-start gap-4">
                        <div className="flex-1">
                            <div className="flex items-center gap-3">
                                <Sparkles className="h-5 w-5 text-accent flex-shrink-0" />
                                <CardTitle>{aiResult!.title}</CardTitle>
                            </div>
                            <CardDescription>{aiResult!.code}</CardDescription>
                        </div>
                        <Badge variant="outline" className="border-accent text-accent">{aiResult!.degreeOfCharge}</Badge>
                        </div>
                    </CardHeader>
                    <CardContent>
                        <p className="text-sm text-muted-foreground line-clamp-2">
                        {aiResult!.practicalSummary}
                        </p>
                    </CardContent>
                    </Card>
                </StatuteDetailModal>
            )}

            {showNotFound && (
                <div className="text-center py-16">
                    <BookOpen className="mx-auto h-12 w-12 text-muted-foreground" />
                    <h3 className="mt-4 text-lg font-medium">No Statutes Found</h3>
                    <p className="mt-1 text-sm text-muted-foreground">Your search for "{searchTerm}" did not match any local or AI-found statutes.</p>
                </div>
            )}
        </div>
      </ScrollArea>
    </div>
  )
}

declare module "react" {
    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
      style?: React.CSSProperties & { [key: string]: string | number };
    }
}

"use client"

import { useState } from "react"
import {
  summarizeDocument,
  type SummarizeDocumentInput,
} from "@/ai/flows/summarize-document"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Loader2, Sparkles, Terminal } from "lucide-react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export function Summarizer({
  documentText,
  documentTitle,
}: {
  documentText: string
  documentTitle: string
}) {
  const [summary, setSummary] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  const [isOpen, setIsOpen] = useState(false)

  const handleSummarize = async () => {
    if (!documentText) return
    setIsLoading(true)
    setError("")
    setSummary("")
    try {
      const input: SummarizeDocumentInput = { documentText }
      const result = await summarizeDocument(input)
      setSummary(result.summary)
    } catch (e) {
      setError("Failed to generate summary. The AI model may be unavailable.")
      console.error(e)
    } finally {
      setIsLoading(false)
    }
  }

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open)
    if (open && !summary && !isLoading && !error) {
      handleSummarize()
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Sparkles className="mr-2 h-4 w-4 text-accent" />
          AI Summary
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>AI Summary: {documentTitle}</DialogTitle>
          <DialogDescription>
            This summary is generated by AI. Always refer to the original
            document for official use.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 min-h-[20rem] flex items-center justify-center">
          {isLoading && (
            <div className="flex flex-col items-center justify-center text-center">
              <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
              <p className="text-muted-foreground">Generating summary...</p>
            </div>
          )}
          {error && (
            <Alert variant="destructive">
              <Terminal className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {summary && (
            <ScrollArea className="h-80">
              <p className="whitespace-pre-wrap text-sm leading-relaxed text-foreground/80">
                {summary}
              </p>
            </ScrollArea>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => setIsOpen(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
